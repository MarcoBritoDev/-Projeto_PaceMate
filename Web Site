<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relógio de Corrida - Dashboard</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Leaflet.js CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

    <!-- Custom CSS -->
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }
        #map {
            height: 500px;
            width: 100%;
        }
        #dashboard {
            margin-top: 20px;
        }
        .status-box {
            display: flex;
            align-items: center;
        }
        .status-icon {
            width: 20px;
            height: 20px;
            margin-right: 8px;
        }
        .info-box {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        .navbar-custom {
            background-color: #ff5722;
            color: #fff;
        }
        .navbar-custom .nav-link, .navbar-custom .navbar-brand {
            color: #fff;
        }
    </style>
</head>
<body>

    <!-- Barra de Navegação -->
    <nav class="navbar navbar-expand-lg navbar-custom">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Relógio de Corrida</a>
            <ul class="navbar-nav ms-auto">
                <li class="nav-item status-box">
                    <img id="gpsStatus" class="status-icon" src="https://img.icons8.com/emoji/48/000000/red-circle-emoji.png" alt="GPS status">
                    <span id="gpsText">GPS Off</span>
                </li>
                <li class="nav-item status-box ms-3">
                    <img id="bpmStatus" class="status-icon" src="https://img.icons8.com/emoji/48/000000/red-circle-emoji.png" alt="BPM status">
                    <span id="bpmText">BPM Off</span>
                </li>
                <li class="nav-item ms-3">
                    <button class="btn btn-light" onclick="toggleActivity()">Iniciar Atividade</button>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Mapa e Gráficos -->
    <div class="container" id="dashboard">
        <div class="row">
            <div class="col-lg-8">
                <!-- Mapa -->
                <div id="map"></div>
            </div>
            <div class="col-lg-4">
                <!-- Informações de Corrida -->
                <div class="info-box mb-4">
                    <h4>BPM</h4>
                    <p id="bpm" class="display-6">0</p>
                </div>
                <div class="info-box mb-4">
                    <h4>Distância</h4>
                    <p id="distance" class="display-6">0.00 km</p>
                </div>
                <div class="info-box mb-4">
                    <h4>Ritmo</h4>
                    <p id="pace" class="display-6">0.00 min/km</p>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-md-12">
                <canvas id="bpmChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Leaflet.js JS -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Custom JS -->
    <script>
        // Inicializar o Mapa
        var map = L.map('map').setView([-15.7942, -47.8822], 13); // Brasília como ponto inicial
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        var marker = L.marker([-15.7942, -47.8822]).addTo(map);

        // Atualizar a localização (Exemplo, substitua por dados reais)
        function updateLocation(lat, lng) {
            map.setView([lat, lng], 13);
            marker.setLatLng([lat, lng]);
        }

        // Gráfico de BPM com Chart.js
        var ctx = document.getElementById('bpmChart').getContext('2d');
        var bpmChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [], // Timestamps ou pontos de tempo
                datasets: [{
                    label: 'BPM',
                    data: [], // Dados de BPM
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        // Atualizar o Dashboard
        function updateDashboard(bpm, distance, pace, lat, lng, gpsStatus, bpmStatus) {
            document.getElementById('bpm').textContent = bpm;
            document.getElementById('distance').textContent = distance.toFixed(2) + ' km';
            document.getElementById('pace').textContent = pace.toFixed(2) + ' min/km';

            // Atualizar o gráfico
            var now = new Date().toLocaleTimeString();
            bpmChart.data.labels.push(now);
            bpmChart.data.datasets[0].data.push(bpm);
            bpmChart.update();

            // Atualizar localização no mapa
            updateLocation(lat, lng);

            // Atualizar status do GPS
            var gpsIcon = document.getElementById('gpsStatus');
            var gpsText = document.getElementById('gpsText');
            if (gpsStatus) {
                gpsIcon.src = "https://img.icons8.com/emoji/48/000000/green-circle-emoji.png";
                gpsText.textContent = "GPS On";
            } else {
                gpsIcon.src = "https://img.icons8.com/emoji/48/000000/red-circle-emoji.png";
                gpsText.textContent = "GPS Off";
            }

            // Atualizar status do BPM
            var bpmIcon = document.getElementById('bpmStatus');
            var bpmText = document.getElementById('bpmText');
            if (bpmStatus) {
                bpmIcon.src = "https://img.icons8.com/emoji/48/000000/green-circle-emoji.png";
                bpmText.textContent = "BPM On";
            } else {
                bpmIcon.src = "https://img.icons8.com/emoji/48/000000/red-circle-emoji.png";
                bpmText.textContent = "BPM Off";
            }
        }

        // Simulação de Iniciar/Parar Atividade
        var activityStarted = false;
        function toggleActivity() {
            var btn = document.querySelector('button');
            activityStarted = !activityStarted;
            btn.textContent = activityStarted ? 'Parar Atividade' : 'Iniciar Atividade';
        }

        // Simulação de atualização de dados a cada segundo (substitua por dados reais do ESP32)
        setInterval(function() {
            // Simulação de dados aleatórios
            var bpm = Math.floor(Math.random() * 50) + 70;
            var distance = Math.random() * 5;
            var pace = Math.random() * 10;
            var lat = -15.7942 + Math.random() * 0.01;
            var lng = -47.8822 + Math.random() * 0.01;

            var gpsStatus = Math.random() > 0.5;  // Simulação do status do GPS
            var bpmStatus = Math.random() > 0.5;  // Simulação do status do BPM

            updateDashboard(bpm, distance, pace, lat, lng, gpsStatus, bpmStatus);
        }, 1000); // Atualizar a cada 1 segundo
    </script>

</body>
</html>
